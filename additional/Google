(1) http://www.careercup.com/question?id=18090674
Data-structure and algorithm used in Load Balancer?
Explaining algorithm write code for it

We can use something like a min-heap. Where the node value is the number of connections handled by the server.
Each server can maintain a list of clients it is serving. 
In addition to this we can have a HashMap to store the <client,server> pair to retrieve the server.

(2) http://www.fgdsb.com/2015/01/25/peek-iterator/
写一个PeekIterator，包装一个普通的Iterator，要实现peek()方法，返回当前iterator指向的元素，但是不能移动它。
除此之外也要实现has_next()和next()方法。
--> This is in fact a Java question, because has_next() and next() are Java-specific iterator operation.
--> 策略：告诉面试官做过了， 要换！

(3) http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=116823&extra=page%3D1%26filter%3Dsortid%26sortid%3D311&page=1
给你一堆input，每一个input是一条边，表示谁和谁是朋友，例如
    1 - 2
    3 - 4
    4 - 5
要求找出所有的groups，每个group里面的人认识，group和group间的人不认识。如上面的例子，返回 {1, 2}, {3, 4, 5}

建一个n*n的boolean matrix, 对于每个pair把相应的两个位置置1，然后用一个visited[] 和BFS的方法，遍历即可，不走对角线

(4) http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=116823&extra=page%3D1%26filter%3Dsortid%26sortid%3D311&page=1
给你一个target number，和一个list，list里面装的都是整数。问是否能用list里面的所有数字，只用四则运算和括号之类的，
问能不能得到target number。很像24点，不过是它的扩展。四个数必须按顺序.

用分治法来做。for循环从0开始，每次分成左右两边，左边的结果是一个list，右边的结果也是个list。
然后每次从左边的list和右边的list中各取出一个数字，进行加减乘除，看看能不能得到target。
for循环里面求左右两个list也是同样的函数，这样的话就是递归。

如果只用一个单纯的dfs，类似于permutation那样子的是会出现问题。其实我刚开始写了一个类似与permutation的解法，
后来发现(1 + 2) * (3 + 4)这种情况处理不了。

不过分治法需要你对每个过程保存一个结果集，然后这些对结果集进行Cross式的合并，
这种方式程序比较清晰但空间复杂度容易很高。我想了个纯粹的DFS方法，就是直接往原序列里插入运算符，
N个数需要插满N-1个操作符（中止条件），最后计算形成的逆波兰式，如果等于目标数就直接返回

比如 1234，你DFS的过程往第二个数之后的序列插入运算符（N-1个）， 比如12+34*-，该逆波兰式等于（1+2）-（3*4）； 
如果是1234+-/, 那就等于1/(2-（3+4）)。这样深搜就不用保存中间运算结果集合了！

(5) http://www.fgdsb.com/2015/01/13/design-special-container/
设计一个数据结构，要求支持插入，删除和random返回一个元素这三种操作，每种操作的复杂度都要是O(1)。

Google, Yelp, Twitter都考过这题。
我们需要一个vector和一个hash table。vector存实际的数据，hash table存每个value对应在数组里面的index。
add操作要把新插进去的value的id保存到hash table里。
remove操作首先根据给的value在hash中查出所在id，然后把数组最后一个元素move到要删除的这个元素所在的位置。
，然后更新index和并且pop_back()即可。
random返回只需要一个简单的rand() % size就好。
注意这个solution是无法处理重复元素的。

(6) http://www.fgdsb.com/2015/01/19/max-length-of-the-loop/
Given an array
Indexes 0 1 2 3 4
Values  3 2 1 4 0
Values are the next index of the jump 0 -> 3 -> 4 -> 0... 1 -> 2 -> 1...
Write a function to detect if there are loops. If yes, get the max length of the loop possible, 
otherwise just return zero.

G家题，实际上就是有向图找最大环。POJ有类似题。用一个DFS走一遍就好，用两个数组，一个记录visited，一个记录走过的长度。

(7) http://www.fgdsb.com/2015/01/17/segregate-even-and-odd/
Given an array A[], write a function that segregates even and odd numbers. The functions should put all
even numbers first, and then odd numbers.
Example
Input = {12, 34, 45, 9, 8, 90, 3}
Output = {12, 34, 8, 90, 45, 9, 3}

G家题。就是2-way partitioning，sort colors的变种题。

(8) http://www.fgdsb.com/2015/01/16/find-all-sources/
一个数组 A: 1 3 0 2 4 7
input: dest-node: A0
output: all the source nodes: (A1, A3, A4)
数组中每个元素表示他能走的步数，既能向左走 又能向右走，能到A[0]的点有A[1]和A[4]，A[1]可以走3步到A[4] A[4]能走4步道A[0]。

G家电面题。反向建图，然后从终点做BFS，路过的点就push到结果里。见图片示例: http://www.fgdsb.com/2015/01/16/find-all-sources/

(9) http://www.fgdsb.com/2015/01/14/randomly-return-0-or-1/
Write a function to get a positive integer n as input and return 0 or 1. 
The probability of returning 1 should be 1/(2^n)

G家的题。因为是1/2^n，那么执行最多n次rand() % 2即可。连续n次随机到0的概率就是1/(2^n)，中途只要随机到1就立即返回0即可。

(10) http://www.fgdsb.com/2015/01/11/why-we-dont-get-error-anymore/
There is a code with a runtime error. We add printf to display the value of a variable and we don’t get the
runtime error anymore. explain what the reason can be.

这也是一道出现过多次的Google面试题。CareerCup上提供了一段很有意思的C语言代码:
#include <cstdio>
#include <cstring>

int main()
{
    const void* res = memchr("Syshsh Pavlik", 's', 8);
    printf("%p\n", res);  // uncomment this line and see what happens
    return !*(int*)res;
}
对于C/C++这类内存可以灵活掌控的语言来说，这个问题并不算特别罕见。比如错误的static_cast转换一个对象后，
在调用这个指针的成员，是可能触发一些未知错误的。在加上printf后，改变了内存布局，有可能这个runtime error就不会触发了。

(11) http://www.fgdsb.com/2015/01/08/min-distance-sum/
二维矩阵里面有obstacle，已知有k个点，求房间中离这k个点距离之和最短的那个点。

对所有的K个点做一次BFS，记录下每个点的最短距离和，最后扫一遍找出最小值即可。复杂度是O(K*N^2)，感觉有更优的解。

(12) http://www.fgdsb.com/2015/01/07/search-longest-string-in-dict/
给一个dictionary, 一个string,找出dict 里能全部用string里的letter 表示的所有最长的词。
For example:
字典包含如下单词：
abcde, abc, abbbc, abbbccca, abbbcccabbcx
给string = "abc"，最长单词应为"abbbccca"

也是给一个字典，所以建trie比较合适，避免重复搜索字符。

(13) http://www.fgdsb.com/2015/01/07/search-pattern/
给一个dictionary, 再给一个set of coding string （g5, goo3, goog2, go2le………). 
return all string from dictionary that can be matched with the coding string. 要求尽量减少dictionary look up 次数。

因为给了一个字典，可能包含单词非常多，可以用trie来预处理。

(14) http://www.fgdsb.com/2015/01/05/max-dif-of-two-subarrays/
Given an array of integers. Find two disjoint contiguous subarrays such that the absolute difference between the sum of two subarray is maximum.
Note: The subarrays should not overlap.
For example:
Array: { 2, -1, -2, 1, -4, 2, 8 }
Result subarrays: {-1, -2, 1, -4 }, { 2, 8 }
Maximum difference = 16

插split point,与best time to buy and sell stocks(III)相同

(15) http://www.fgdsb.com/2015/01/03/police-and-rooms/
一个 n x n 矩阵，每个房间可能是封闭的房间，可能是警察，可能是开的房间，
封闭的房间不能过，返回一个n x n矩阵，每一个元素是最近的警察到这个房间的最短距离。
初始矩阵中-1代表封闭房间，INT_MAX代表普通房间，0代表有警察的房间。

常规思路是对每一个警察做一次BFS，复杂度为O(n^4)。可以一开始找出所有警察，然后一起push到BFS的queue里面，同时搜索。
参见代码http://www.fgdsb.com/2015/01/03/police-and-rooms/，将所有警察放到queue中后，每次pop一个，push四周的没有
visit过的四个点，更新距离。
复杂度可降为O(n^2)。
本题出现的频率还是很高的，比如还有这样的描述形式：
给一个matrix里面有人，墙和空格，把空格里填上需要走到最近的人那里的步数。
