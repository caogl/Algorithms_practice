(1) http://www.careercup.com/question?id=18090674
Data-structure and algorithm used in Load Balancer?
Explaining algorithm write code for it

We can use something like a min-heap. Where the node value is the number of connections handled by the server.
Each server can maintain a list of clients it is serving. 
In addition to this we can have a HashMap to store the <client,server> pair to retrieve the server.

(2) http://www.fgdsb.com/2015/01/25/peek-iterator/
写一个PeekIterator，包装一个普通的Iterator，要实现peek()方法，返回当前iterator指向的元素，但是不能移动它。
除此之外也要实现has_next()和next()方法。
--> This is in fact a Java question, because has_next() and next() are Java-specific iterator operation.
--> 策略：告诉面试官做过了， 要换！

(3) http://www.fgdsb.com/2015/01/18/merge-BST/
You are given two balanced binary search trees. Write a function that merges the two given balanced BSTs into a 
balanced binary search tree. Your merge function should take O(M+N) time and O(1) space.

G家onsite题，算是很多小问题的综合题。因为不允许用extra space，可以先把两个输入BST给转换成链表，然后merge两个链表，
再把merge完的链表重新转化成BST。

(4) http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=116823&extra=page%3D1%26filter%3Dsortid%26sortid%3D311&page=1
给你一堆input，每一个input是一条边，表示谁和谁是朋友，例如
    1 - 2
    3 - 4
    4 - 5
要求找出所有的groups，每个group里面的人认识，group和group间的人不认识。如上面的例子，返回 {1, 2}, {3, 4, 5}

建一个n*n的boolean matrix, 对于每个pair把相应的两个位置置1，然后用一个visited[] 和BFS的方法，遍历即可，不走对角线

(5) http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=116823&extra=page%3D1%26filter%3Dsortid%26sortid%3D311&page=1
给你一个target number，和一个list，list里面装的都是整数。问是否能用list里面的所有数字，只用四则运算和括号之类的，
问能不能得到target number。很像24点，不过是它的扩展。四个数必须按顺序.

用分治法来做。for循环从0开始，每次分成左右两边，左边的结果是一个list，右边的结果也是个list。
然后每次从左边的list和右边的list中各取出一个数字，进行加减乘除，看看能不能得到target。
for循环里面求左右两个list也是同样的函数，这样的话就是递归。

如果只用一个单纯的dfs，类似于permutation那样子的是会出现问题。其实我刚开始写了一个类似与permutation的解法，
后来发现(1 + 2) * (3 + 4)这种情况处理不了。

不过分治法需要你对每个过程保存一个结果集，然后这些对结果集进行Cross式的合并，
这种方式程序比较清晰但空间复杂度容易很高。我想了个纯粹的DFS方法，就是直接往原序列里插入运算符，
N个数需要插满N-1个操作符（中止条件），最后计算形成的逆波兰式，如果等于目标数就直接返回

比如 1234，你DFS的过程往第二个数之后的序列插入运算符（N-1个）， 比如12+34*-，该逆波兰式等于（1+2）-（3*4）； 
如果是1234+-/, 那就等于1/(2-（3+4）)。这样深搜就不用保存中间运算结果集合了！

(6) http://www.fgdsb.com/2015/01/13/design-special-container/
设计一个数据结构，要求支持插入，删除和random返回一个元素这三种操作，每种操作的复杂度都要是O(1)。

Google, Yelp, Twitter都考过这题。
我们需要一个vector和一个hash table。vector存实际的数据，hash table存每个value对应在数组里面的index。
add操作要把新插进去的value的id保存到hash table里。
remove操作首先根据给的value在hash中查出所在id，然后把数组最后一个元素move到要删除的这个元素所在的位置。
，然后更新index和并且pop_back()即可。
random返回只需要一个简单的rand() % size就好。
注意这个solution是无法处理重复元素的。
